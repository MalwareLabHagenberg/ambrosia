/*{
A = new Object();
A.filter = new Object();

A.filter.Property = function(prop){
    this.prop = prop;
}

A.filter.Comparison = function(p1, op, p2){
    this.p1 = p1;
    this.op = op;
    this.p2 = p2;
}

A.filter.Static = function(val){
    this.val = val;
}

A.filter.optimizeLogical = function(p1, op, p2){
    var p1_static = p1 instanceof A.filter.Static;
    var p2_static = p2 instanceof A.filter.Static;

    if(op == 'OR'){
        if(p1_static && p1.val == false){
            return p2;
        }else if(p1_static && p1.val == true){
            return new A.filter.Static(true);
        }else if(p2_static && p2.val == false){
            return p1;
        }else if(p2_static && p2.val == true){
            return new A.filter.Static(true);
        }
   }else{
        if(p1_static && p1.val == true){
            return p2;
        }else if(p1_static && p1.val == false){
            return new A.filter.Static(false);
        }else if(p2_static && p2.val == true){
            return p1;
        }else if(p2_static && p2.val == false){
            return new A.filter.Static(false);
        }
    }

    return new A.filter.LogicalOperation(p1, op, p2);
}

A.filter.LogicalOperation = function(p1, op, p2){
    this.p1 = p1;
    this.op = op;
    this.p2 = p2;
}

A.filter.UnaryOperator = function(op, ex){
    this.op = op;
    this.ex = ex;
}

A.filter.handleLogicalOperation = function(ex1, rest){
    if(rest){
        return A.filter.optimizeLogical(ex1, rest[0], rest[1]);
    }else{
        return ex1;
    }
}

A.filter.handleStatement = function(op, block, stmt2){
    var stmt = A.filter.optimizeLogical(op, 'AND', block);
    return new A.filter.optimizeLogical(stmt, 'OR', stmt2);
}
}*/

start
  = statement

statement
  = ws op:selector block:block ";"? ws stmt:statement
    { return new A.filter.handleStatement(op, block, stmt); }
  / ws
    { return new A.filter.Static(false); }

selector
  = ex1:expression rest:(logical_operator selector)?
    { return A.filter.handleLogicalOperation(arguments[0], arguments[1])}

block
  = "{" stmt:statement "}"
    { return stmt; }
  / ""
    { return new A.filter.Static(true); }

expression
  = "(" ws exp:selector ")" ws
    { return exp; }
  / cmp:comparison 
    { return cmp; }
  / uo:unary_operator ex:expression
    { return new A.filter.UnaryOperator(uo, ex); }

comparison
  = p1:value op:operator p2:value
    { return new A.filter.Comparison(p1, op, p2) }
  / "true"
    { return new A.filter.Static(true); }
  / "false"
    { return new A.filter.Static(false); }

value
  = property
  / string
  / number

operator
  = '==' ws { return 'EQ'}
  / '!=' ws { return 'NEQ' }
  / '>=' ws { return 'GE' }
  / '>' ws { return 'G' }
  / '<=' ws { return 'LE' }
  / '<' ws { return 'L' }
  / '~' ws { return 'REGEX' }
  / ':' ws { return 'IN' }
  / '!:' ws { return 'NIN' }

unary_operator
  = '!' ws { return 'NOT' }

logical_operator
  = '&&' ws { return 'AND'}
  / '||' ws { return 'OR' }

property
  = p:[a-zA-Z_\*\.]+  ws
    { return new A.filter.Property(p.join("")) }

string
  = '"' str:[^\"]* '"'  ws
    { return str.join("") }

number
  = num:$([-+]? [0-9]* "."? [0-9]*)  ws
    { return parseFloat(num) }

ws
  = [ \t\n]* "#" [^\n]* "\n"? ws?
  / [ \t\n]* 